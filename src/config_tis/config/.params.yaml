camera_tis_node:
    exposure_time: 1000         # int, exposure time in in microseconds

rotate_image_node:
    mode: 0                     # int, 0 - 90, 1 - 180, 2 - 270
    
laser_line_center_node:
    ksize: 5                    # int
    threshold: 35               # int
    width_min: 1.               # double
    width_max: 30.              # double

#laser_imagepos_node:
#   start:          0

laser_line_filter_node:
    enable: false               # bool, enable
    window_size: 10             # int pixel
    gap: 5                      # int pixel
    deviate: 5.                 # double pixel
    step: 2.                    # double pixel
    length: 30                  # int pixel

line_center_reconstruction_node:
    homography_matrix: [0.136,0.125,-62.688,-0.478,0.001,277.247,0.003,-0.000,1.000]

seam_tracking_node:
    codes:
        - "import numpy as np\nfrom numpy.polynomial.polynomial import polyfit\n\ndtype =\
          \ [(x, np.float32) for x in 'xyi']\n\ndef fn(d):\n    return\
          \ d\n    #d = interpolate(d)\n    #id = local_max(d, delta=60)\n    #if len(id):\n\
          \        #p = cross(d, id[0], delta=60, num=280)\n        #return np.concatenate((p,d))\n\
          \    #return d\n\ndef interpolate(d: np.array):\n    if d.size == 0:\n        return\
          \ np.array([], dtype=dtype)\n    length = int(np.max(d['i']))\n    ret = np.full((length\
          \ + 1,), np.nan, dtype=dtype)\n    ret[d['i'].astype(np.int)] = d\n    return ret\n\
          \n\ndef local_max(d: np.array, *, delta: int):\n    md = []\n    id = []\n    for\
          \ i in range(0, len(d), delta):\n        mask = ~np.isnan(d['y'][i:i + delta])\n\
          \        if np.any(mask):\n            id.append(np.nanargmax(d['y'][i:i + delta])\
          \ + i)\n    for i in id:\n        if i - delta + 1 < 0 or i + delta > d.size:\n\
          \            continue\n        m = np.nanargmax(d['y'][i - delta + 1:i + delta])\
          \ + i - delta + 1\n        if i == m:\n            md.append(m)\n    return md\n\
          \n\ndef local_min(d: np.array, *, delta: int):\n    md = []\n    id = []\n    for\
          \ i in range(0, len(d), delta):\n        mask = ~np.isnan(d['y'][i:i + delta])\n\
          \        if np.any(mask):\n            id.append(np.nanargmin(d['y'][i:i + delta])\
          \ + i)\n    for i in id:\n        if i - delta + 1 < 0 or i + delta > d.size:\n\
          \            continue\n        m = np.nanargmin(d['y'][i - delta + 1:i + delta])\
          \ + i - delta + 1\n        if i == m:\n            md.append(m)\n    return md\n\
          \n\ndef cross(d: np.array, id: int, *, delta: int, num: int = None):\n    s1 = None\
          \ if num is None or id - num + 1 < 0 else id - num + 1\n    e1 = 0 if id - delta\
          \ < 0 else id - delta\n    s2 = id + delta + 1\n    e2 = None if num is None else\
          \ id + num\n\n    d['i'][s1:e1] = -2\n    d['i'][s2:e2] = -3\n    mask1 = ~np.isnan(d['x'][s1:e1])\n\
          \    mask2 = ~np.isnan(d['x'][s2:e2])\n    if np.count_nonzero(mask1) > 1 and np.count_nonzero(mask2)\
          \ > 1:\n        b1, m1 = polyfit(d['x'][s1:e1][mask1], d['y'][s1:e1][mask1], 1)\n\
          \        b2, m2 = polyfit(d['x'][s2:e2][mask2], d['y'][s2:e2][mask2], 1)\n     \
          \   px = (b2 - b1) / (m1 - m2)\n        py = px * m1 + b1\n        return np.array([\n\
          \            (px, py, -1), (0, b1, -4),\n            (100, 100 * m1 + b1, -4),\n\
          \            (0, b2, -5),\n            (100, 100 * m2 + b2, -5)],\n            dtype=dtype)\n\
          \    else:\n        return np.array([], dtype=dtype)"
    task: 0                     # int
    delta_x: 0.                 # double in mm
    delta_y: 0.                 # double in mm
    enable: false               # bool
    window_size: 10             # int in count
    gap: 2                      # int in count
    step: 2.                    # double in mm
    length: 5                   # int in count

modbus_node:
    parameterport: 1500
    robotsetport: 1501
    port: 1502                  # int
    robot_mod: 0

gpio_raspberry_node:
    test: TODO
